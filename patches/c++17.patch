--- Makefile
+++ Makefile
@@ -7,9 +7,8 @@
 BIN = digistring
 
 # General compiler flags
-# c++20 is required for std::source_location (error.h)
 CXX = g++
-CXXFLAGS = -std=c++20 -g -fopenmp
+CXXFLAGS = -std=c++17 -g -fopenmp
 DEPFLAGS = -MT $@ -MMD -MF $(patsubst obj/%.o, dep/%.d, $@)
 WARNINGS = -Wall -Wextra -Wshadow -pedantic -Wstrict-aliasing -Wfloat-equal #-Wfloat-conversion #-Wconversion #-Warith-conversion #-Wold-style-cast
 OPTIMIZATIONS = -O3 #-march=native -mtune=native -mfma -mavx2 -ftree-vectorize -ffast-math


--- src/graphics.cpp
+++ src/graphics.cpp
@@ -282,11 +282,12 @@
     static bool warning_printed = false;
     if(estimator_graphics != nullptr) {
         set_max_recorded_value_if_larger(estimator_graphics->get_last_max_recorded_value());
-        const GraphicsData gd = {
-            .max_display_frequency = max_display_frequency,
-            .max_recorded_value = max_recorded_value,
-            .time_domain_y_zoom = time_domain_y_zoom
-        };
+
+        GraphicsData gd;
+        gd.max_display_frequency = max_display_frequency;
+        gd.max_recorded_value = max_recorded_value;
+        gd.time_domain_y_zoom = time_domain_y_zoom;
+
         estimator_graphics->render(renderer, {0, 0, res_w, res_h}, gd);
     }
     else if(!warning_printed) {


--- src/error.h
+++ src/error.h
@@ -11,7 +11,6 @@
 #include <iostream>
 // #include <sstream>
 #include <stdexcept>
-#include <source_location>
 
 #include <unistd.h>  // isatty()
 
@@ -76,8 +75,8 @@
 //     return out_msg;
 // }
 
-// inline void ex_msg(const std::string &msg, const std::source_location location = std::source_location::current()) {
-//     __ex_msg(location.file_name(), location.line(), msg);
+// inline void ex_msg(const std::string &msg) {
+//     __ex_msg(__FILE__, __LINE__, msg);
 // }
 
 
@@ -138,24 +137,24 @@
 
 #define STR(x) __str(x)
 
-inline void error(const std::string &msg, const std::source_location location = std::source_location::current()) {
-    __msg("Error", RED, location.file_name(), location.line(), msg);
+inline void error(const std::string &msg) {
+    __msg("Error", RED, __FILE__, __LINE__, msg);
 }
 
-inline void warning(const std::string &msg, const std::source_location location = std::source_location::current()) {
-    __msg("Warning", YELLOW, location.file_name(), location.line(), msg);
+inline void warning(const std::string &msg) {
+    __msg("Warning", YELLOW, __FILE__, __LINE__, msg);
 }
 
 #ifdef INFO_SOURCE_LOC
-    inline void info(const std::string &msg, const std::source_location location = std::source_location::current()) {
-        __msg("Info", GREEN, location.file_name(), location.line(), msg);
+    inline void info(const std::string &msg) {
+        __msg("Info", GREEN, __FILE__, __LINE__, msg);
     }
-    // inline void info(std::stringstream &msg_stream, const std::source_location location = std::source_location::current()) {
+    // inline void info(std::stringstream &msg_stream) {
     //     std::string msg_line;
     //     while(msg_stream) {
     //         std::getline(msg_stream, msg_line);
     //         if(msg_line != "")
-    //             __msg("Info", GREEN, location.file_name(), location.line(), msg_line);
+    //             __msg("Info", GREEN, __FILE__, __LINE__, msg_line);
     //         else
     //             __msg("");
     //     }
@@ -176,8 +175,8 @@
     // }
 #endif  // INFO_SOURCE_LOC
 
-inline void debug(const std::string &msg, const std::source_location location = std::source_location::current()) {
-    __msg("Debug", BLUE, location.file_name(), location.line(), msg);
+inline void debug(const std::string &msg) {
+    __msg("Debug", BLUE, __FILE__, __LINE__, msg);
 }
 
 inline void hint(const std::string &msg) {
