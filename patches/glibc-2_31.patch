--- src/quit.cpp
+++ src/quit.cpp
@@ -3,7 +3,6 @@
 #include "error.h"
 
 #include <csignal>  // catching signals
-#include <cstring>  // sigabbrev_np()
 #include <execinfo.h>  // backtrace() functions
 
 
@@ -32,12 +31,12 @@
 
 void quit_signal_handler(const int signum) {
     if(quit) {
-        info("Received signal 'SIG" + STR(sigabbrev_np(signum)) + "' while quitting; will now force quit");
+        info("Received signal number " + STR(signum) + " while quitting; will now force quit");
         exit(-2);
     }
 
     __msg("");  // Print on a new line for when using ctrl+c to send a SIGINT (causes ^C to be printed)
-    info("Signal 'SIG" + STR(sigabbrev_np(signum)) + "' received");
+    info("Signal number " + STR(signum) + " received");
 
     set_quit();
     hint("Sending another terminating signal will force quit");
@@ -48,7 +47,7 @@
     if(signum == SIGSEGV)
         error("Segmentation fault occurred; printing stack trace (use addr2line to resolve offsets)...");
     else
-        error("Signal 'SIG" + STR(sigabbrev_np(signum)) + "' received; printing stack trace (use addr2line to resolve offsets)...");
+        error("Signal number " + STR(signum) + " received; printing stack trace (use addr2line to resolve offsets)...");
     hint("First two in call stack are likely from signal handler");
 
     const int n_frames = 10;
